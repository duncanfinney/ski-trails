#!/usr/bin/env python3

import yaml
from columnar import columnar
from click import style
from plugins.vail import vail
from plugins.abasin import parse_trails as abasin
import argparse
import threading

RATINGS = ratings = { 1 : "●", 2 : "■", 3 : "♦", 4 : "♦♦", 5 : "⬬"}

def get_config():
  with open("config.yaml", "r") as f:
    config = yaml.load(f.read(), Loader=yaml.SafeLoader)
  return config


def plugin(resort):
        
    t = eval(resort["plugin"])(resort)
    
    for a in t["areas"]:
        for r in a["trails"]:
            trail = [resort["name"], a["name"], r["name"], ratings[r["rating"]], r["status"]]
            data.append(trail)


def cli():

    global data 
    parser = argparse.ArgumentParser(description="Get Ski Trail Status", epilog="By default, show all trails from config.yaml")
    parser.add_argument('-o', '--open', default=False, action='store_true', help="Open trails only")
    args = parser.parse_args()
    config = get_config()["resorts"]
    data = []
   
    for c in config:
        plugin(c)

    if args.open: data = [i for i in data if i[4] == "OPEN"]

    patterns = [
        ('OPEN', lambda text: style(text, fg='green')),
        ('●', lambda text: style(text, fg='green')),
        ('■', lambda text: style(text, fg='blue')),
        ('⬬', lambda text: style(text, fg='red')),
    ]


    table = columnar(data, headers=['Resort', 'Area', 'Trail', 'Difficulty', 'Status'], patterns=patterns, no_borders=True)
    print(table)


def main():
    cli()

if __name__ == "__main__":
    main()
