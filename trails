#!/usr/bin/env python3

import yaml
from columnar import columnar
from click import style
from plugins.vail import vail
from plugins.abasin import parse_trails as abasin
import argparse
import threading
import os

# Globals
RATINGS = ratings = { 1 : "●", 2 : "■", 3 : "♦", 4 : "♦♦", 5 : "⬬"}


def get_config():
    '''
    helper func to parse configfile
    '''

    #TODO add some safety here
    trails_dir = os.path.dirname(os.path.realpath(__file__))
    
    with open(trails_dir + "/config.yaml", "r") as f:
      config = yaml.load(f.read(), Loader=yaml.SafeLoader)
    return config


def plugin(resort):
    '''
    wrapper func to run a plugin
    '''    
    t = eval(resort["plugin"])(resort)
    
    for a in t["areas"]:
        for r in a["trails"]:
            trail = [resort["name"], a["name"], r["name"], ratings[r["rating"]], r["status"]]
            data.append(trail)


def pretty_print(data):
    '''
    pretty print cli output
    '''
    patterns = [
        ('OPEN', lambda text: style(text, fg='green')),
        ('●', lambda text: style(text, fg='green')),
        ('■', lambda text: style(text, fg='blue')),
        ('⬬', lambda text: style(text, fg='red')),
    ]

    table = columnar(data, headers=['Resort', 'Area', 'Trail', 'Difficulty', 'Status'], patterns=patterns, no_borders=True)
    print(table)

def parse_cli_args():
    '''
    parse cli args
    '''
    parser = argparse.ArgumentParser(description="Get Ski Trail Status", epilog="By default, show all trails from config.yaml")
    parser.add_argument('-o', '--open', default=False, action='store_true', help="Open trails only")
    parser.add_argument('-s', '--single-thread', default=False, action='store_true', help="Run with 1 thread")
    return parser.parse_args()

def multiproc(threads):
    '''
    generic fork function
    '''
    for t in threads:
        t.start()
    for t in threads:
        t.join()

def cli():
    '''
    Main function
    '''

    args = parse_cli_args()

    global data 
    data = []
    config = get_config()["resorts"]

    threads = []

    for resort in config:  
        if not args.single_thread: 
            threads.append(threading.Thread(target=plugin, args=(resort,)))
        else:
            plugin(resort)
     
    if not args.single_thread: multiproc(threads)

    if args.open: 
        data = [i for i in data if i[4] == "OPEN"]
    data.sort(key = lambda x: x[1])
    data.sort(key = lambda x: x[0]) 
    pretty_print(data) 

def main():
    cli()

if __name__ == "__main__":
    main()
