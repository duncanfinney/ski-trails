#!/usr/bin/env python3
from columnar import columnar
from click import style
import argparse
import threading

#lib 
from lib.multi import multiproc
from lib.transformations import filter_trails, sort_trails
from lib.config import get_config
import lib.constants

# Plugins
from plugins.vail import vail
from plugins.abasin import abasin

# Globals

CLI_HEADER = ['resort', 'area', 'trail', 'difficulty', 'status']

def plugin(resort):
    '''
    wrapper func to run a plugin
    '''    
    t = eval(resort["plugin"])(resort)
    
    for a in t["areas"]:
        for r in a["trails"]:
            trail = [resort["name"], a["name"], r["name"], lib.constants.RATINGS_MAP[r["rating"]]["sym"], r["status"]]
            data.append(trail)


def pretty_print(data):
    '''
    pretty print cli output
    '''
    patterns = [
        ('OPEN', lambda text: style(text, fg='green')),
        ('●', lambda text: style(text, fg='green')),
        ('■', lambda text: style(text, fg='blue')),
        ('⬬', lambda text: style(text, fg='red')),
    ]

    table = columnar(data, headers=lib.constants.CLI_HEADER, patterns=patterns, no_borders=True)
    print(table)

def parse_cli_args():
    '''
    parse cli args
    '''
    parser = argparse.ArgumentParser(description="Get Ski Trail Status", epilog="By default, show all trails from config.yaml")
    parser.add_argument('-o', '--open', default=False, action='store_true', help="Open trails only")
    parser.add_argument('-s', '--sort', default=False, help="sort by (--sort difficulty)")
    parser.add_argument('-f', '--filter', default=[], action="append", help="filter by (--filter difficulty=blue)")
    return parser.parse_args()





def cli():
    '''
    Main function
    '''

    args = parse_cli_args()

    global data 
    data = []
    config = get_config()["resorts"]

    threads = []

    for resort in config:  
        threads.append(threading.Thread(target=plugin, args=(resort,)))
     
    multiproc(threads)

    if args.open: 
        data = [i for i in data if i[4] == "OPEN"]
    
    if args.filter:
        data = filter_trails(data, args.filter) 
    
    data = sort_trails(data, args.sort)
    
    if data: pretty_print(data) 

def main():
    cli()

if __name__ == "__main__":
    main()
